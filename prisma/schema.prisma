generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  role                   UserRole  @default(USER)
  password               String?
  accounts               Account[]
  Address                Address[]
  bookings               Booking[]
  sessions               Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id                     String        @id @default(cuid())
  userId                 String
  date                   DateTime
  status                 BookingStatus @default(PENDING)
  stripeId               String?       @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  dropoffAddress         String?
  notes                  String?
  pickupAddress          String?
  receiptUrl             String?
  totalCents             Int?
  priceCents             Int
  scheduledAt            DateTime
  airport                String?
  terminal               String?
  user                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Link to Invoice (one-to-one)
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?  @unique
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  label      String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, label])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invoice {
  id         String   @id               // Stripe invoice.id
  customerId String
  status     String                     // "PAID" | "FAILED" | "OPEN"
  amountDue  Int
  createdAt  DateTime @default(now())

  // Back-link to Booking (one-to-one)
  booking    Booking?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  AWAITING_PAYMENT
  PAID
}

enum UserRole {
  USER
  ADMIN
}

